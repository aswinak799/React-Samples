{"ast":null,"code":"var _jsxFileName = \"/home/cybrosys/react/avanced router/frontend/src/pages/Events.jsx\",\n  _s = $RefreshSig$();\n// import { useEffect, useState } from 'react';\n\nimport { useLoaderData, json, useD } from 'react-router-dom';\nimport EventsList from '../components/EventsList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const data = useLoaderData();\n  const difer = useDidfer;\n  //   const [isLoading, setIsLoading] = useState(false);\n  //   const [fetchedEvents, setFetchedEvents] = useState();\n  //   const [error, setError] = useState();\n\n  //   useEffect(() => {\n  //     async function fetchEvents() {\n  //       setIsLoading(true);\n  //       const response = await fetch('http://localhost:8080/events');\n\n  //       if (!response.ok) {\n  //         setError('Fetching events failed.');\n  //       } else {\n  //         const resData = await response.json();\n  //         setFetchedEvents(resData.events);\n  //       }\n  //       setIsLoading(false);\n  //     }\n\n  //     fetchEvents();\n  //   }, []);\n\n  if (data.isError) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: data.message\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 30\n  }, this);\n  const events = data.events;\n  return /*#__PURE__*/_jsxDEV(EventsList, {\n    events: events\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 12\n  }, this);\n}\n_s(EventsPage, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nasync function loadEvents() {\n  const response = await fetch(\"http://localhost:8080/events\");\n  if (!response.ok) {\n    // return {isError : true, message: 'Could not fetch data!...'}\n    // throw new Response(JSON.stringify({ message: 'could not fetch events!'}), {status:500,})\n    throw json({\n      message: 'could not fetch events!'\n    }, {\n      status: 500\n    });\n  } else {\n    const resData = await response.json();\n    return resData;\n  }\n}\nexport const loader = () => {};\n\n// return (\n//     <>\n//       <div style={{ textAlign: 'center' }}>\n//         {isLoading && <p>Loading...</p>}\n//         {error && <p>{error}</p>}\n//       </div>\n//       {!isLoading && fetchedEvents && <EventsList events={fetchedEvents} />}\n//     </>\n//   );\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["useLoaderData","json","useD","EventsList","jsxDEV","_jsxDEV","EventsPage","_s","data","difer","useDidfer","isError","children","message","fileName","_jsxFileName","lineNumber","columnNumber","events","_c","loadEvents","response","fetch","ok","status","resData","loader","$RefreshReg$"],"sources":["/home/cybrosys/react/avanced router/frontend/src/pages/Events.jsx"],"sourcesContent":["// import { useEffect, useState } from 'react';\n\nimport { useLoaderData, json, useD } from 'react-router-dom';\nimport EventsList from '../components/EventsList';\n\nfunction EventsPage() {\n    const data = useLoaderData();\n    const difer = useDidfer\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [fetchedEvents, setFetchedEvents] = useState();\n//   const [error, setError] = useState();\n\n//   useEffect(() => {\n//     async function fetchEvents() {\n//       setIsLoading(true);\n//       const response = await fetch('http://localhost:8080/events');\n\n//       if (!response.ok) {\n//         setError('Fetching events failed.');\n//       } else {\n//         const resData = await response.json();\n//         setFetchedEvents(resData.events);\n//       }\n//       setIsLoading(false);\n//     }\n\n//     fetchEvents();\n//   }, []);\n\n    if (data.isError) return <p>{data.message}</p>\n    const events = data.events;\n    return <EventsList events={events} />\n}\n\nexport default EventsPage;\n\nasync function loadEvents() {\n  const response = await fetch(\"http://localhost:8080/events\");\n\n  if (!response.ok) {\n    // return {isError : true, message: 'Could not fetch data!...'}\n    // throw new Response(JSON.stringify({ message: 'could not fetch events!'}), {status:500,})\n    throw json({ message: 'could not fetch events!'}, {status:500})\n  } else {\n    const resData = await response.json();\n    return resData;\n  }\n}\n\nexport const loader = () => {\n  \n};\n\n\n// return (\n//     <>\n//       <div style={{ textAlign: 'center' }}>\n//         {isLoading && <p>Loading...</p>}\n//         {error && <p>{error}</p>}\n//       </div>\n//       {!isLoading && fetchedEvents && <EventsList events={fetchedEvents} />}\n//     </>\n//   );"],"mappings":";;AAAA;;AAEA,SAASA,aAAa,EAAEC,IAAI,EAAEC,IAAI,QAAQ,kBAAkB;AAC5D,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EAClB,MAAMC,IAAI,GAAGR,aAAa,CAAC,CAAC;EAC5B,MAAMS,KAAK,GAAGC,SAAS;EAC3B;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEI,IAAIF,IAAI,CAACG,OAAO,EAAE,oBAAON,OAAA;IAAAO,QAAA,EAAIJ,IAAI,CAACK;EAAO;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAI,CAAC;EAC9C,MAAMC,MAAM,GAAGV,IAAI,CAACU,MAAM;EAC1B,oBAAOb,OAAA,CAACF,UAAU;IAACe,MAAM,EAAEA;EAAO;IAAAJ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACzC;AAACV,EAAA,CA3BQD,UAAU;EAAA,QACFN,aAAa;AAAA;AAAAmB,EAAA,GADrBb,UAAU;AA6BnB,eAAeA,UAAU;AAEzB,eAAec,UAAUA,CAAA,EAAG;EAC1B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA;IACA,MAAMtB,IAAI,CAAC;MAAEY,OAAO,EAAE;IAAyB,CAAC,EAAE;MAACW,MAAM,EAAC;IAAG,CAAC,CAAC;EACjE,CAAC,MAAM;IACL,MAAMC,OAAO,GAAG,MAAMJ,QAAQ,CAACpB,IAAI,CAAC,CAAC;IACrC,OAAOwB,OAAO;EAChB;AACF;AAEA,OAAO,MAAMC,MAAM,GAAGA,CAAA,KAAM,CAE5B,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,IAAAP,EAAA;AAAAQ,YAAA,CAAAR,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}