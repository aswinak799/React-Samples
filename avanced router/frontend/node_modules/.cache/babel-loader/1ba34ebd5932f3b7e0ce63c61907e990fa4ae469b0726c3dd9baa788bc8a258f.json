{"ast":null,"code":"var _jsxFileName = \"/home/cybrosys/react/avanced router/frontend/src/pages/EventDetail.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { defer, json, redirect, useRouteLoaderData } from 'react-router-dom';\nimport EventItem from '../components/EventItem';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EventDetailPage = () => {\n  _s();\n  const data = useRouteLoaderData('event-detail');\n  return /*#__PURE__*/_jsxDEV(EventItem, {\n    event: data.event\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 8\n  }, this);\n};\n_s(EventDetailPage, \"4DBW6nwrvXRMSwRBgIay5Sszcp8=\", false, function () {\n  return [useRouteLoaderData];\n});\n_c = EventDetailPage;\nexport default EventDetailPage;\nasync function loadEvent(id) {\n  const response = await fetch('http://localhost:8080/events/' + id);\n  const resData = await response.json();\n  if (!response.ok) {\n    throw json({\n      message: 'Could not fetch details for selected event!'\n    }, {\n      status: 500\n    });\n  } else {\n    return resData.event;\n  }\n}\nasync function loadEvents() {\n  const response = await fetch(\"http://localhost:8080/events\");\n  if (!response.ok) {\n    // return {isError : true, message: 'Could not fetch data!...'}\n    // throw new Response(JSON.stringify({ message: 'could not fetch events!'}), {status:500,})\n    throw json({\n      message: 'could not fetch events!'\n    }, {\n      status: 500\n    });\n  } else {\n    const resData = await response.json();\n    return resData.events;\n  }\n}\nexport async function loader({\n  req,\n  params\n}) {\n  const id = params.id;\n  redefer({\n    events: loadEvents(),\n    event: loadEvent(id)\n  });\n}\nexport async function action({\n  params,\n  request\n}) {\n  const id = params.id;\n  const response = await fetch('http://localhost:8080/events/' + id, {\n    method: 'delete'\n  });\n  if (!response.ok) {\n    throw json({\n      message: 'Could not fetch details for selected event!'\n    }, {\n      status: 500\n    });\n  }\n  return redirect('/events');\n}\nvar _c;\n$RefreshReg$(_c, \"EventDetailPage\");","map":{"version":3,"names":["React","defer","json","redirect","useRouteLoaderData","EventItem","jsxDEV","_jsxDEV","EventDetailPage","_s","data","event","fileName","_jsxFileName","lineNumber","columnNumber","_c","loadEvent","id","response","fetch","resData","ok","message","status","loadEvents","events","loader","req","params","redefer","action","request","method","$RefreshReg$"],"sources":["/home/cybrosys/react/avanced router/frontend/src/pages/EventDetail.jsx"],"sourcesContent":["import React from 'react';\nimport { defer, json, redirect, useRouteLoaderData } from 'react-router-dom';\nimport EventItem from '../components/EventItem'\n\nconst EventDetailPage = () => {\n    const data = useRouteLoaderData('event-detail');\n    return (\n       <EventItem event={data.event} />\n    );\n}\n\nexport default EventDetailPage;\n\n\nasync function loadEvent(id) {\n    const response = await fetch('http://localhost:8080/events/' + id)\n    const resData = await response.json();\n    if (!response.ok) {\n        throw json({message: 'Could not fetch details for selected event!'}, {status: 500})\n    }else{\n        return resData.event;\n    }\n}\n\nasync function loadEvents() {\n    const response = await fetch(\"http://localhost:8080/events\");\n  \n    if (!response.ok) {\n      // return {isError : true, message: 'Could not fetch data!...'}\n      // throw new Response(JSON.stringify({ message: 'could not fetch events!'}), {status:500,})\n      throw json({ message: 'could not fetch events!'}, {status:500})\n    } else {\n      const resData = await response.json();\n      return resData.events;\n    }\n  }\n\nexport  async function loader ({req, params}) {\n    const id = params.id;\n    redefer({\n        events: loadEvents(),\n        event: loadEvent(id),\n    })\n    \n}\n\nexport async function action ({params, request}) {\n    const id = params.id;\n    const response = await fetch('http://localhost:8080/events/' + id, {\n        method: 'delete'\n    });\n    if (!response.ok) {\n        throw json(\n            {\n                message: 'Could not fetch details for selected event!'\n            }, \n            {\n                status: 500\n            });\n    }\n    return redirect('/events')\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,EAAEC,IAAI,EAAEC,QAAQ,EAAEC,kBAAkB,QAAQ,kBAAkB;AAC5E,OAAOC,SAAS,MAAM,yBAAyB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAMC,IAAI,GAAGN,kBAAkB,CAAC,cAAc,CAAC;EAC/C,oBACGG,OAAA,CAACF,SAAS;IAACM,KAAK,EAAED,IAAI,CAACC;EAAM;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAEvC,CAAC;AAAAN,EAAA,CALKD,eAAe;EAAA,QACJJ,kBAAkB;AAAA;AAAAY,EAAA,GAD7BR,eAAe;AAOrB,eAAeA,eAAe;AAG9B,eAAeS,SAASA,CAACC,EAAE,EAAE;EACzB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,GAAGF,EAAE,CAAC;EAClE,MAAMG,OAAO,GAAG,MAAMF,QAAQ,CAACjB,IAAI,CAAC,CAAC;EACrC,IAAI,CAACiB,QAAQ,CAACG,EAAE,EAAE;IACd,MAAMpB,IAAI,CAAC;MAACqB,OAAO,EAAE;IAA6C,CAAC,EAAE;MAACC,MAAM,EAAE;IAAG,CAAC,CAAC;EACvF,CAAC,MAAI;IACD,OAAOH,OAAO,CAACV,KAAK;EACxB;AACJ;AAEA,eAAec,UAAUA,CAAA,EAAG;EACxB,MAAMN,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACG,EAAE,EAAE;IAChB;IACA;IACA,MAAMpB,IAAI,CAAC;MAAEqB,OAAO,EAAE;IAAyB,CAAC,EAAE;MAACC,MAAM,EAAC;IAAG,CAAC,CAAC;EACjE,CAAC,MAAM;IACL,MAAMH,OAAO,GAAG,MAAMF,QAAQ,CAACjB,IAAI,CAAC,CAAC;IACrC,OAAOmB,OAAO,CAACK,MAAM;EACvB;AACF;AAEF,OAAQ,eAAeC,MAAMA,CAAE;EAACC,GAAG;EAAEC;AAAM,CAAC,EAAE;EAC1C,MAAMX,EAAE,GAAGW,MAAM,CAACX,EAAE;EACpBY,OAAO,CAAC;IACJJ,MAAM,EAAED,UAAU,CAAC,CAAC;IACpBd,KAAK,EAAEM,SAAS,CAACC,EAAE;EACvB,CAAC,CAAC;AAEN;AAEA,OAAO,eAAea,MAAMA,CAAE;EAACF,MAAM;EAAEG;AAAO,CAAC,EAAE;EAC7C,MAAMd,EAAE,GAAGW,MAAM,CAACX,EAAE;EACpB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,GAAGF,EAAE,EAAE;IAC/De,MAAM,EAAE;EACZ,CAAC,CAAC;EACF,IAAI,CAACd,QAAQ,CAACG,EAAE,EAAE;IACd,MAAMpB,IAAI,CACN;MACIqB,OAAO,EAAE;IACb,CAAC,EACD;MACIC,MAAM,EAAE;IACZ,CAAC,CAAC;EACV;EACA,OAAOrB,QAAQ,CAAC,SAAS,CAAC;AAC9B;AAAC,IAAAa,EAAA;AAAAkB,YAAA,CAAAlB,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}